<?php

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;
use Drupal\image\Entity\ImageStyle;
use Drupal\paragraphs\Entity\Paragraph;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\spc_mbd\Controller\SpcMbdController;

include_once __DIR__ . '/includes/mbd_helper.php';

/**
 * Implementation of hook_preprocess_menu().
 */
function spc_preprocess_menu(array &$variables) {

  if ($variables['menu_name'] == 'account'){
    foreach ($variables['items'] as $idx => $item) {
      $url = $item['url'];
      if ($url->getRouteName() == 'user.login'){
        $variables['items'][$idx]['title'] = 'Login';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function spc_preprocess_html(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $is_login = \Drupal::currentUser()->isAuthenticated();
  
  if ($is_login){
    $variables['attributes']['class'][] = 'is-login';
  }
  if($route_name == 'spc_mbd.landing') {
    $variables['attributes']['class'][] = 'mbd-landing';
  }
  if($route_name == 'spc_main.landing') {
    $variables['attributes']['class'][] = 'spc-landing';
  }
  if($route_name == 'view.stories_list.page') {
    $variables['attributes']['class'][] = 'spc-stories';
  }
  if($route_name == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface && $node->getType() == 'article') {
      $variables['attributes']['class'][] = 'story-full';
    }
    if ($node instanceof \Drupal\node\NodeInterface && $node->getType() == 'thematic_group') {
      $variables['attributes']['class'][] = 'topic-full';
    }
  }  
  if ($route_name === 'user.login' || $route_name === 'user.pass' || $route_name === 'user.register'){
    $variables['attributes']['class'][] = 'minimal user-page';
  }  
}

/**
 * Implements hook_preprocess_HOOK().
 */
function spc_preprocess_block(&$variables) {
  if ($variables['derivative_plugin_id'] == 'main-menu'){
    
    $menu_tree = \Drupal::menuTree();
    $parameters = new \Drupal\Core\Menu\MenuTreeParameters();
    $tree = $menu_tree->load('main-menu', $parameters);
    $menu = $menu_tree->build($tree);

    $variables['menu_mobile'] = $menu['#items'];
  }
}

/**
 * Implements theme_preprocess_field().
 */
function spc_preprocess_field(&$variables){

    $element = $variables['element'];
    if (isset($element['#field_name'])) {

      if ($element['#field_name'] == 'field_maritime_zone') {
        $theme = \Drupal::theme()->getActiveTheme();
        $theme_path = $theme->getPath();          
          $variables['boundary_refer'] = [
            'icon' => '/' . $theme_path . '/img/zone_steps/6.svg',  
            'name' => '6. Shared Boundary? Refer to <a href="#">Treaty Pathway</a>',
            'state' => 'na', 
        ];
      }
    }
}

/**
 * Implements hook_form_alter().
 */
function spc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  switch ($form_id) {
    case 'user_login_form':
      $form['name']['#placeholder'] = t('Username');
      $form['pass']['#placeholder'] = t('Password');
      $form['loginurl']['#prefix'] = '<p class="auth-link">';
      $form['loginurl']['#suffix'] = '</p>';
      break;
    case 'user_register_form': 
      $form['account']['name']['#weight'] = -10;
      $form['account']['name']['#placeholder'] = t('Username');
      $form['account']['name']['#description'] = t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.');
      $form['account']['mail']['#weight'] = -5;
      $form['account']['mail']['#title'] = t('E-mail address');
      $form['account']['mail']['#placeholder'] = t('E-mail address');
      break;
    case 'user_pass':
      $form['name']['#title'] = t('Username or e-mail address');
      $form['name']['#placeholder'] = t('Username or e-mail address');
      $form['mail'] = [];
      $form['actions']['submit']['#value'] = t('Send new password');
      break;
  }
}

/**
 * Implements theme_preprocess_node().
 */
function spc_preprocess_node(&$variables){
  $node = $variables['node'];
  if ($node instanceof \Drupal\node\NodeInterface && $node->getType() == 'article') {
    $variables['datasets'] = _get_related_datasets($node);
    
    $related_topic_entity = $node->field_related_topic->entity;
    if ($related_topic_entity instanceof \Drupal\node\NodeInterface && $related_topic_entity->getType() == 'thematic_group') {
      $tid = $related_topic_entity->id();
      $variables['related_topic'] = [
          'id' => $tid,
          'url' => \Drupal::service('path_alias.manager')->getAliasByPath('/node/'. $tid),
          'title' => $related_topic_entity->title->value,
          'icon' => $related_topic_entity->field_fa_icon->value
      ];
    }
    
    $syndicated_id = $node->field_syndicated_id->value;
    if (!empty($syndicated_id)){
      $config = \Drupal::getContainer()->get('config.factory')->getEditable('articles_syndication.settings');
      $syndication_url = $config->get('syndication_url');
      
      $variables['syndicated']['id'] = $syndicated_id;
      $variables['syndicated']['url'] = $syndication_url . '/node/'.$syndicated_id;
      
      $body = $node->body->value;
      $variables['syndicated']['body'] = substr($body, strpos($body, "<p"), strpos($body, "</p>")+4);
    }
  }
  
  if ($node instanceof \Drupal\node\NodeInterface && $node->getType() == 'thematic_group') {
    $variables['spc_base_url'] = \Drupal::config('spc_publication_import.settings')->get('spc_base_url');
    $variables['data_insights'] = _get_related_data_insights($node);
    $variables['datasets'] = _get_related_datasets($node);
    $variables['stories'] = _get_related_stories($node);
  }  
}

/**
 * Implements theme_preprocess_term().
 */
function spc_preprocess_taxonomy_term(&$variables){
    $vocabulary = $variables['elements']['#taxonomy_term']->bundle();
    $term = $variables['term'];

    if ($variables['view_mode'] == 'full' && $vocabulary == 'country'){
        $country_code = $term->get('field_country_code')->getValue()[0]['value'];
        @$variables['country_code'] = $country_code;
        
        @$variables['treaty'] = _get_country_treaty($term);
        @$variables['shelf_treaty'] = _get_shelf_treaty($term);
        @$country_detales = _get_country_related_datasets($variables);
        
        $variables['datasets']['count'] = $country_detales['datasetsCount'];
        $variables['datasets']['list'] = @$country_detales['datasets']; 
        
        @$countries_list = _get_countries_list($term);
        $variables['countries']['list'] = $countries_list['list'];
        $variables['countries']['prev'] = $countries_list['prev'];
        $variables['countries']['next'] = $countries_list['next'];
        $variables['countries']['current'] = $countries_list['current'];
        
        @$description = strip_tags($term->get('description')->getValue()[0]['value'], '<a><b><h2><h3><h4><h5><h6><br>');
        
        if (strlen($description) > 600){
            $variables['description']['read'] = substr($description, 0, 600);
            $variables['description']['read_more'] = substr($description, 600, strlen($description)-1);
        } else {
            $variables['description']['read'] = $description;
        }
        
        $variables['empty_zone'] = false;
        if (!$term->get('field_maritime_zone')->getValue()){
            $variables['empty_zone'] = true;
        }
        
        $config = \Drupal::config('spc_mbd.settings');
        $terriaMapUrl = $config->get('mbd_terria_url'); 
        $module_handler = \Drupal::service('module_handler');
        $module_path = $module_handler->getModule('spc_mbd')->getPath();
        $cameras = json_decode(file_get_contents($module_path . '/data/camera.json'), true);
        $initCamera = json_encode($cameras[$country_code]);
        
        $variables['terri_map_url'] = $terriaMapUrl . '#spc&hideWorkbench=1&start='. urlencode($initCamera);
        $variables['#attached']['library'][] =  'spc_mbd/terria_country';
        $variables['#attached']['drupalSettings']['spcMbd']['map'] = _get_country_map_data($term);
        $variables['#attached']['drupalSettings']['spcMbd']['countryCode'] = $country_code;    
        
    }
    
    if ($variables['view_mode'] == 'step' && $vocabulary == 'maritime_zone'){
        $zone = $variables['term'];
        $zone_name = $term->label();
        
        if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
            $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
            $country = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
            $maritime_zone_steps = $country->get('field_maritime_zone')->getValue();
            
            foreach ($maritime_zone_steps as $step){
                $paragraph_step = Paragraph::load($step['target_id']);
                $state = $paragraph_step->field_progress_type->value;
                $step_term_id = $paragraph_step->field_maritime_zone->getValue()[0]['target_id'];
                $paragraph_zone = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($step_term_id);
                $step_zone_name = $paragraph_zone->label();

                if ($zone_name == $step_zone_name){
                    $variables['state'] = $state;
                    $variables['state_name'] = ucfirst(str_replace('_', ' ', $state));
                }
            }
        }
    }
    
}

/**
 * Implements theme_preprocess_node().
 */
function spc_preprocess_paragraph(&$variables){
  $paragraph = $variables['paragraph'];
  $parentBundle = $paragraph->getParentEntity()->bundle();
  
  if ($parentBundle == 'dsp'){
    $title = $paragraph->get('field_title')->value;
    $variables['title_ancor'] = strtolower(str_replace('.', '', str_replace(' ', '-', $title)));
  }
}

/**
 * Implements theme_suggestions_alter().
 */
function spc_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}
