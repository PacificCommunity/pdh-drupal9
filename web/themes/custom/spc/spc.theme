<?php

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;
use Drupal\paragraphs\Entity\Paragraph;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implementation of hook_preprocess_menu().
 */
function spc_preprocess_menu(array &$variables) {

  if ($variables['menu_name'] == 'account'){
    foreach ($variables['items'] as $idx => $item) {
      $url = $item['url'];
      if ($url->getRouteName() == 'user.login'){
        $variables['items'][$idx]['title'] = 'Login';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function spc_preprocess_html(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if($route_name == 'spc_mbd.landing') {
    $variables['attributes']['class'][] = 'mbd-landing';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function spc_preprocess_block(&$variables) {
  if ($variables['derivative_plugin_id'] == 'main-menu'){
    $variables['menu_mobile'] = 'menu_mobile';
  }
}

/**
 * Implements theme_preprocess_field().
 */
function spc_preprocess_field(&$variables){

    $element = $variables['element'];
    if (isset($element['#field_name'])) {

      if ($element['#field_name'] == 'field_maritime_zone') {
        $theme = \Drupal::theme()->getActiveTheme();
        $theme_path = $theme->getPath();          
          $variables['boundary_refer'] = [
            'icon' => '/' . $theme_path . '/img/zone_steps/6.svg',  
            'name' => '6. Shared Boundary? Refer to <a href="#">Treaty Pathway</a>',
            'state' => 'na', 
        ];
      }
    }
}

/**
 * Implements theme_preprocess_node().
 */
function spc_preprocess_taxonomy_term(&$variables){
    $vocabulary = $variables['elements']['#taxonomy_term']->bundle();
    $term = $variables['term'];

    if ($variables['view_mode'] == 'full' && $vocabulary == 'country'){
        
        @$variables['treaty'] = _get_country_treaty($term);
        
        @$variables['shelf_treaty'] = _get_shelf_treaty($term);
        
        @$country_detales = _get_country_related_datasets($variables);
        
        $variables['datasets']['count'] = $country_detales['datasetsCount'];
        $variables['datasets']['list'] = @$country_detales['datasets']; 
        
        @$countries_list = _get_countries_list($term);
        $variables['countries']['list'] = $countries_list['list'];
        $variables['countries']['prev'] = $countries_list['prev'];
        $variables['countries']['next'] = $countries_list['next'];
        $variables['countries']['current'] = $countries_list['current'];
        
        @$description = strip_tags($term->get('description')->getValue()[0]['value'], '<a><b><h2><h3><h4><h5><h6><br>');
        
        if (strlen($description) > 600){
            $variables['description']['read'] = substr($description, 0, 600);
            $variables['description']['read_more'] = substr($description, 600, strlen($description)-1);
        } else {
            $variables['description']['read'] = $description;
        }
        
        $variables['empty_zone'] = false;
        if (!$term->get('field_maritime_zone')->getValue()){
            $variables['empty_zone'] = true;
        }
    }
    
    if ($variables['view_mode'] == 'step' && $vocabulary == 'maritime_zone'){
        $zone = $variables['term'];
        $zone_name = $term->label();
        
        if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
            $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
            $country = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
            $maritime_zone_steps = $country->get('field_maritime_zone')->getValue();
            
            foreach ($maritime_zone_steps as $step){
                $paragraph_step = Paragraph::load($step['target_id']);
                $state = $paragraph_step->field_progress_type->value;
                $step_term_id = $paragraph_step->field_maritime_zone->getValue()[0]['target_id'];
                $paragraph_zone = Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($step_term_id);
                $step_zone_name = $paragraph_zone->label();

                if ($zone_name == $step_zone_name){
                    $variables['state'] = $state;
                    $variables['state_name'] = ucfirst(str_replace('_', ' ', $state));
                }
            }
        }
    }
    
}

/**
 * Implements theme_preprocess_node().
 */
function spc_preprocess_paragraph(&$variables){
  $paragraph = $variables['paragraph'];
  $parentBundle = $paragraph->getParentEntity()->bundle();
  
  if ($parentBundle == 'dsp'){
    $title = $paragraph->get('field_title')->value;
    $variables['title_ancor'] = strtolower(str_replace('.', '', str_replace(' ', '-', $title)));
  }
}

function _get_country_related_datasets($variables){
    $country = $variables['elements']['#taxonomy_term'];
    $c_code = $country->get('field_country_code')->getValue()[0]['value'];
    $dataset_ids = $country->get('field_related_datasets')->getValue();

    $spc_base_url = 'https://pacificdata.org/data/';

    $country_detales = [];
    $country_detales['datasetsCount'] = 0;

    if (!empty($dataset_ids)){
        foreach ($dataset_ids as $dataset_id){
            $id = $dataset_id['value'];
            $api = $spc_base_url . 'api/3/action/package_show';
            
            if ($responce = json_decode(file_get_contents($api . '?id=' . $id))){
                $publication = $responce->result;

                if (is_object($publication)){
                    $country_detales['datasetsCount'] += 1;

                    $dataset = [];
                    $dataset['name'] = $publication->name;
                    $dataset['title'] = $publication->title;
                    $dataset['url'] = $spc_base_url . 'dataset/' . $publication->id;

                    //creation date.
                    $originalDate = $publication->metadata_created;
                    $dataset['date'] = date("M, d, Y", strtotime($originalDate));

                    //Organisation data.
                    $dataset['organization']['image_url'] = 'https://pacificdata.org/data/uploads/group/' . $publication->organization->image_url;
                    $dataset['organization']['spc_base_url'] = $spc_base_url . 'organization/' . $publication->organization->name;
                    $dataset['organization']['title'] = $publication->organization->title;

                    //Category mapper.
                    $tags = $publication->tags;
                    $categories =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('categories');

                    foreach ($categories as $category_term) {
                      $category = Term::load($category_term->tid);
                      $term_code = $category->get('field_c_code')->getValue()[0]['value'];

                      foreach ($tags as $tag){
                        $tag_name = $tag->name;

                        if ($term_code == $tag_name){
                          $aliasManager = \Drupal::service('path_alias.manager');
                          $url = $aliasManager->getAliasByPath('/taxonomy/term/' . $category->id());

                          $dataset['tags'][] = [
                            'url' => $url,
                            'name' => $category->getName(),
                          ];
                        }

                      }
                    }

                    //Resources data.
                    if ($resources = $publication->resources){
                        foreach ($resources as $resource){
                            $data_resource['url'] = $resource->url;
                            $data_resource['format'] = $resource->format;
                            $dataset['resources'][$resource->format] = $data_resource;
                        }
                    }

                    $country_detales['datasets'][] =  $dataset;
                }
            }
        }
    }

    return $country_detales;
}

function _get_countries_list($current_country){
    $countries = [];
    
    $current_code = $current_country->get('field_country_code')->getValue()[0]['value'];

    $countries_terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('country');
    $theme = \Drupal::theme()->getActiveTheme();
    $theme_path = $theme->getPath();

    $active_key = 0;
    foreach($countries_terms as $key => $country_term){
        $country = Term::load($country_term->tid);

        $name = $country->getName();
        $country_code = $country->get('field_country_code')->getValue()[0]['value'];

        $aliasManager = \Drupal::service('path_alias.manager');
        $url = $aliasManager->getAliasByPath('/taxonomy/term/' . $country->id());
        
        $class_name = '';
        if ($current_code == $country_code){
            $class_name = 'active';
            $active_key = $key;
        }

        $countries['list'][] = [
          'url' => $url,
          'name' => $name,
          'class' => $class_name,  
        ];
      }
      
      $countries['current'] = $countries['list'][$active_key];
      if ($active_key == count($countries_terms) -1){
          $countries['prev'] = $countries['list'][count($countries_terms) -2];
          $countries['next'] = $countries['list'][0];
      } else if ($active_key == 0){
          $countries['prev'] = $countries['list'][count($countries_terms) -1];
          $countries['next'] = $countries['list'][1];
      } else {
          $countries['prev'] = $countries['list'][$active_key -1];
          $countries['next'] = $countries['list'][$active_key +1];
      }

    return $countries;
}

function _get_country_treaty($term){
    $output = [
        'completed' => [],
        'in_progress' => [],
        'not_started' => [],
        'na' => []
    ];
    
    $country_id = intval($term->id());
    $condition_or = new \Drupal\Core\Database\Query\Condition('OR');
    $condition_or->condition('bco.field_boundary_country_one_target_id', $country_id);
    $condition_or->condition('bct.field_boundary_country_two_target_id', $country_id);
    
    $q = \Drupal::database()->select('node','n')
        ->fields('n', ['nid'])
        ->condition('n.type', 'boundary_treaty')
        ->condition($condition_or);
    $q->join('node__field_boundary_country_one', 'bco',  'bco.entity_id = n.nid');
    $q->join('node__field_boundary_country_two', 'bct',  'bct.entity_id = n.nid');
    $results = $q->execute()->fetchAll();
    
    $theme = \Drupal::theme()->getActiveTheme();
    $theme_path = $theme->getPath();
    
    if (!empty($results)){
        foreach($results as $key => $value){
            $treaty = Node::load($value->nid);
            
            $treaty_state = $treaty->get('field_treaty_state')->getValue()[0]['value'];
            $output[$treaty_state][$key]['state'] = $treaty_state;

            $country_one_id = $treaty->get('field_boundary_country_one')->getValue()[0]['target_id'];
            $country_one = Term::load($country_one_id);
            $output[$treaty_state][$key]['country_one'] = $country_one->getName();
            $country_one_url = \Drupal::service('path_alias.manager')->getAliasByPath('/taxonomy/term/' . $country_one_id);
            $output[$treaty_state][$key]['country_one_url'] = $country_one_url;

            $country_one_file = File::load($country_one->get('field_flag')->getValue()[0]['target_id']);
            if (is_object($country_one_file)){
              $output[$treaty_state][$key]['country_one_flag'] = file_create_url($country_one_file->getFileUri());
            } else {
                $country_one_flag = '/' . $theme_path . '/img/flags/' . $country_one->get('field_country_code')->getValue()[0]['value'] . '.svg';
                $output[$treaty_state][$key]['country_one_flag'] = $country_one_flag;
            }
            
            $country_two_id = $treaty->get('field_boundary_country_two')->getValue()[0]['target_id'];
            $country_two = Term::load($country_two_id);
            $output[$treaty_state][$key]['country_two'] = $country_two->getName();
            $country_two_url = \Drupal::service('path_alias.manager')->getAliasByPath('/taxonomy/term/' . $country_two_id);
            $output[$treaty_state][$key]['country_two_url'] = $country_two_url;            
            
            $country_two_file = File::load($country_two->get('field_flag')->getValue()[0]['target_id']);
            if (is_object($country_two_file)){
                $output[$treaty_state][$key]['country_two_flag'] = file_create_url($country_two_file->getFileUri());
            } else {
                $country_two_flag = '/' . $theme_path . '/img/flags/' . $country_two->get('field_country_code')->getValue()[0]['value'] . '.svg';
                $output[$treaty_state][$key]['country_two_flag'] = $country_two_flag;
            }

            $download = File::load($treaty->get('field_boundaries_treaty_file')->getValue()[0]['target_id']);
            if (is_object($download)){
              $output[$treaty_state][$key]['download'] = file_create_url($download->getFileUri());
            }
            
            switch ($treaty_state) {
                case 'completed': 
                    $completed_date = $treaty->get('field_year_only')->getValue()[0]['value'];
                    $output[$treaty_state][$key]['completed_date'] = $completed_date;
                    
                    break;
                case 'in_progress': 
                    $steps = $treaty->get('field_boundaries_treaty_steps')->getValue();
                    $treaty_steps = [];
                    foreach($steps as $step){
                        $paragraph_step = Paragraph::load($step['target_id']);
                        $state = $paragraph_step->field_progress_type->value;

                        $step_term_id = $paragraph_step->field_boundary_treaty->getValue()[0]['target_id'];
                        $paragraph_treaty = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($step_term_id);
                        $name = $paragraph_treaty->label();
                        
                        $icon = '';
                        $file = File::load($paragraph_treaty->get('field_image')->getValue()[0]['target_id']);
                        if (is_object($file)){
                          $icon = file_create_url($file->getFileUri());
                        }

                        $treaty_steps[] = [
                            'state' => $state,
                            'name' => $name,
                            'icon' => $icon,
                            'tooltip' => ucfirst(str_replace('_', ' ', $state)),
                        ];
                    }
                    
                    $output[$treaty_state][$key]['treaty_steps'] = $treaty_steps;
                    break;                
            }
        }
    }
    
    return $output;
}

function _get_shelf_treaty($term){
    $output = [];
    
    $country_id = intval($term->id());
    $q = \Drupal::database()->select('node','n')
        ->fields('n', ['nid'])
        ->condition('n.type', 'continental_shelf')
        ->condition('lc.field_limit_countries_target_id', $country_id);
    $q->join('node__field_limit_countries', 'lc',  'lc.entity_id = n.nid');
    $results = $q->execute()->fetchAll();
    
    $theme = \Drupal::theme()->getActiveTheme();
    $theme_path = $theme->getPath(); 
    
    if (!empty($results)){
        foreach($results as $key => $value){
            $shelf = [];
            
            $shelf_node = Node::load($value->nid);             
            $shelf['name'] = $shelf_node->get('title')->getValue()[0]['value'];
            
            $steps = $shelf_node->get('field_shelf_steps')->getValue();
            $treaty_steps = [];
            foreach($steps as $step){
                $paragraph_step = Paragraph::load($step['target_id']);
                $state = $paragraph_step->field_progress_type->value;

                $step_term_id = $paragraph_step->field_shelf_step_term->getValue()[0]['target_id'];
                $paragraph_treaty = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($step_term_id);
                $name = $paragraph_treaty->label();

                $icon = '';
                $file = File::load($paragraph_treaty->get('field_image')->getValue()[0]['target_id']);
                if (is_object($file)){
                  $icon = file_create_url($file->getFileUri());
                }

                $treaty_steps[] = [
                    'state' => $state,
                    'name' => $name,
                    'icon' => $icon,
                    'tooltip' => ucfirst(str_replace('_', ' ', $state)),
                ];
            }
            $shelf['steps'] = $treaty_steps;
            
            $output[] = $shelf;
        }
    }            
    return $output;
}
